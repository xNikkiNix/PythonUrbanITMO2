# -*- coding: utf-8 -*-
"""Nikitina VA "PythonUrban_lab_2.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j_h2wDM-UZV7_8YmawPLdQU0JwKD-NSd

# Итоговый проект. Улицы. Объекты культурного наследия.
"""

# TODO собрать установку всех необходимых модулей в одном месте
!pip install geopandas 
!pip install mapclassify
!pip install pandas
!pip install osmnx
!pip install keplergl 
!pip install leafmap

# TODO собрать импорты всех модулей в одном месте
import geopandas as gpd
import pandas as pd
import osmnx as ox
from IPython.display import Javascript
import leafmap.kepler as leafmap

TILES = "CartoDB positron"  # Название подложки для карт

# TODO указать любой район Санкт-Петербург из OSM https://wiki.openstreetmap.org/wiki/RU:%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3/%D0%A0%D0%B0%D0%B9%D0%BE%D0%BD%D1%8B
TERRITORY_NAME = "Невский район, Санкт-Петербург"  # название территории для которой будут строиться слои

# TODO указать ссылку на файл из вашего github репозитория, которая начинается с https://raw.githubusercontent.com/
KGIOP_FILE_URL = "https://raw.githubusercontent.com/xNikkiNix/PythonUrbanITMO2/main/kgiop_objects.geojson"  # ссылка на слой с объектами культурного наследия
STREETS_FILE_URL = "https://raw.githubusercontent.com/xNikkiNix/PythonUrbanITMO2/main/streets.geojson"  # ссылка на слой с улицами

"""## Территория

### Загрузка территории из OSM (Extract)
"""

district = ox.geocode_to_gdf(TERRITORY_NAME) # TODO загрузить geodataframe с геометрией для территории TERRITORY_NAME

"""## Улицы

### Загрузка файла с улицами (Extract)
"""

gdf = gpd.read_file(STREETS_FILE_URL, mask = district)
gdf
 # TODO отфильтровать улицы по маске геометрии территории полученной ранее

"""### Обработка данных с улицами (Transform)"""

gdf["name"].is_unique # TODO сгруппировать

gdf = gdf.dissolve(by="name") 
gdf# и объединить геометрии с одинаковыми названиями

"""### Сохранение слоя с улицами (Load)"""

rename_columns = {
    "name": "Название улицы"
}
gdf.rename(columns=rename_columns, inplace=True)
gdf.head()
# TODO переименовать столбцы в русские названия, кроме столбца geometry
# TODO для того чтобы переименовать индекс, нужно обратиться и нему и вызвать от него метод rename (https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Index.rename.html)

gdf.to_crs(4326).to_file('177streets.geojson', driver='GeoJSON') # TODO сохранить слой в географической проекции в формате GeoJSON

gdf.explore()

"""## Объекты культурного наследия

### Загрузка объектов культурного наследия (Extract)
"""

# TODO отфильтровать улицы по маске геометрии территории полученной ранее
gdf_2 = gpd.read_file(KGIOP_FILE_URL, mask = district)
gdf_2

"""### Обработка объектов культурного наследия (Transform)"""

# TODO добавить два столбца lon и lat, в которых будут долгота и широта 
gdf_2["lon"] = gdf_2.to_crs(3857).geometry.centroid.to_crs(4326).x
gdf_2["lat"] = gdf_2.to_crs(3857).geometry.centroid.to_crs(4326).y
gdf_2

"""### Сохранение слоя с объектами культурного наследия (Load)"""

# TODO переименовать столбцы в русские названия, кроме столбца geometry
rename_columns = {
    "id": "Идентификатор",
    "ensemble_name": "Название ансамбля",
    "object_name": "Название объекта",
    "occurrence_time": "Время события",
    "object_location": "Местонахождение",
    "historical_category": "Историческая категория",
    "normative_act": "Нормативный акт",
    "object_type": "Тип объекта",
    "lon": "Долгота",
    "lat": "Широта"
}
gdf_2.rename(columns=rename_columns, inplace=True)
gdf_2

# TODO сохранить слой в географической проекции в формате GeoJSON
gdf_2.to_crs(4326).to_file('kgiop_2.geojson', driver='GeoJSON')

gdf_2.explore()